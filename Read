This is stend have 2 virtual machines
Firsrt is Server and second is Client
First step create Vagrant file:
***************************************************************
# vim: set ft=ruby

MACHINES = {
:Server => {
        :box_name => "debian/bullseye64",
        :vm_name => "Server",
        :net => [
                   {ip: '192.168.20.2', adapter: 2, netmask: "255.255.255.0", virtualbox__intnet: "net2"},
                   {ip: '192.168.56.10', adapter: 3},
       
        ]
  },

:Client => {
        :box_name => "debian/bullseye64",
        :vm_name => "Client",
        :net => [
                   {ip: '192.168.20.3', adapter: 2 , netmask: "255.255.255.0", virtualbox__intnet: "net2"},
                   {ip: '192.168.56.11', adapter: 3},

                ]
},

}
Vagrant.configure("2") do |config|

  MACHINES.each do |boxname, boxconfig|
    
    config.vm.define boxname do |box|
   
      box.vm.box = boxconfig[:box_name]
      box.vm.host_name = boxconfig[:vm_name]
      boxconfig[:net].each do |ipconf|
      box.vm.network "private_network", ip: ipconf[:ip], virtualbox__intnet: ipconf[:virtualbox__intnet], netmask: ipconf[:netmask], adapter: ipconf[:adapter]
      end
       box.vm.provider :virtualbox do |v|
        v.customize ['modifyvm', :id, '--nested-hw-virt', 'on']
      end

  
 if boxconfig[:vm_name] == "Client"
       box.vm.provision "ansible" do |ansible|
        ansible.playbook = "main.yml"
        ansible.inventory_path = "host"
        ansible.host_key_checking = "false"
        ansible.limit = "all"
       end
    end
   end
  end
end
***************************************************************************
2)After create file host
[Server]
Server ansible_host=127.0.0.1 ansible_user=vagrant ansible_port=2222 ansible_private_key_file=/home/localadm/otus/.vagrant/machines/Server/virtualbox/private_key
[Client]
Client ansible_host=127.0.0.1 ansible_user=vagrant ansible_port=2200 ansible_private_key_file=/home/localadm/otus/.vagrant/machines/Client/virtualbox/private_key

[vm:children]
Server
Client
*******************************************************************************
3) Next step create Ansible-playbok and install programs openvpn and iperf3
   
    - name: install update and program
      apt:
        update_cache: yes
        name:
        - openvpn
        - iperf3
        - nmap
        - ntp
        - tcpdump
        state: latest
********************************************************************************
4)create ntp( if we use diferent time we can have a problem for certificate)
- name: Update NTP configuration
      template:
        src: ntp.j2
        dest: /etc/ntp.conf
    
    - name: start service
      service:
            name: ntp
            state: started
            enabled: true
*********************************************************************************
5)Generated key for openvpn
 
        - name: generate key openvpn
          shell: openvpn --genkey secret /etc/openvpn/static.key

*******************************************************************************
6)Create template:
        - name: create template 
          template:
            src: templ_ovpn/templ.j2
            dest: /etc/openvpn/server.conf
          tags: 
            - rest_vpn

This is template launches tun or tap vpn and ras
I created conditions in vars- if you choose tun or tap,or ras you mast change file vars
tap: false
tun: false
ras: true
****************************************************************************
{% if ansible_hostname == 'Server' and tap  == true %}  # if host Server then enable preference for config openvpn tap
dev tap
ifconfig 10.10.10.1 255.255.255.0    #Created virtual subnet 10.10.10.`
topology subnet
secret /etc/openvpn/static.key       # path secret key
comp-lzo                             #use LZO compression on the VPN tunnel 
status /var/log/openvpn-status.log   
log /var/log/openvpn.log             # path logs 
verb 3
*****************************************************************************
{% elif ansible_hostname == 'Client' and tap == true %} #if this Clent choose preference for clinet
dev tap
remote 192.168.56.10                                    # remote host server             
ifconfig 10.10.10.2 255.255.255.0                       # ip client for virtual subnet
topology subnet
route 192.168.56.0 255.255.255.0                            
secret /etc/openvpn/static.key                      
comp-lzo
status /var/log/openvpn-status.log
log /var/log/openvpn.log
verb 3
{% endif %}
******************************************************************************
{% if ansible_hostname == 'Server' and tun  == true %}    # this is preferece tun for server and client but we use tun preference 
dev tun
ifconfig 10.10.10.1 255.255.255.0
topology subnet
secret /etc/openvpn/static.key
comp-lzo
status /var/log/openvpn-status.log
log /var/log/openvpn.log
verb 3
{% elif ansible_hostname == 'Client' and tun == true %}
dev tun
remote 192.168.56.10
ifconfig 10.10.10.2 255.255.255.0
topology subnet
route 192.168.56.0 255.255.255.0
secret /etc/openvpn/static.key
comp-lzo
status /var/log/openvpn-status.log
log /var/log/openvpn.log
verb 3
{% endif %}
*******************************************************************************
{% if ansible_hostname == 'Server' and ras  == true %}
port 1207
proto udp
dev tun
ca /etc/openvpn/pki/ca.crt
cert /etc/openvpn/pki/issued/server.crt
key /etc/openvpn/pki/private/server.key
dh /etc/openvpn/pki/dh.pem
server 10.10.10.0 255.255.255.0
ifconfig-pool-persist ipp.txt
client-to-client
client-config-dir /etc/openvpn/client
topology subnet
max-clients 5
route 10.15.0.0 255.255.255.0
keepalive 10 120
comp-lzo
persist-key
persist-tun
status /var/log/openvpn-status.log
log /var/log/openvpn.log
verb 3
{% elif ansible_hostname == 'Client' and ras == true %}
dev tun
proto udp
remote 192.168.56.10 1207
client
resolv-retry infinite
remote-cert-tls server
ca /ca.crt
cert /client.crt
key /client.key
push "route 192.168.56.0 255.255.255.0"
persist-key
persist-tun
comp-lzo
verb 3
{% endif %}
********************************************************************************
6)created service template service for server openvpn 
        - name: create file service openvpn
          file:
            path: /etc/systemd/system/openvpn@client.service
            state: absent
            owner: root
            group: root
         
        - name: create template service
          template:
            src: serv_pref/service.j2
            dest: /etc/systemd/system/openvpn@.service
*********************************************************************************

[Unit]
Description=OpenVPN Tunneling Application On %I
After=network.target

[Service]
Type=notify
PrivateTmp=true
ExecStart=/usr/sbin/openvpn --cd /etc/openvpn/ --config %i.conf

[Install]
WantedBy=multi-user.target
*******************************************************************************
7) i create condition
if the folders PKI folders exists playbok skip comand but if there is no folder then

 - name: create pki dir
          stat:
            path: /etc/openvpn/pki/
          register: pki_dir
        - name: comand with pki
          block:
            - name: check folder and init pki
              shell: |
                /usr/share/easy-rsa/easyrsa init-pki  # initivialisation pki
                echo 'rasvpn' | /usr/share/easy-rsa/easyrsa build-ca nopass   #create main sertification centr
                echo 'rasvpn' | /usr/share/easy-rsa/easyrsa gen-req server nopass  #"generate-request". It is a command in EasyRSA to create a new private key and certificate signing request
                echo 'yes' | /usr/share/easy-rsa/easyrsa sign-req server server    #"sign-request" this is sign cert
                /usr/share/easy-rsa/easyrsa gen-dh                                 # generating Diffie-Hellman metod
                echo 'client' | /usr/share/easy-rsa/easyrsa gen-req client nopass  #simmilar only client
                echo 'yes' | /usr/share/easy-rsa/easyrsa sign-req client client
              args:
                chdir: /etc/openvpn/  
          when: not pki_dir.stat.exists                                           # if there is a folder
***************************************************************************************
8) Copy generate sert and  key for local machine
    - name: copy generate key for local machine
          fetch:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            flat: yes
          with_items:
            - { src: "/etc/openvpn/static.key", dest: "cert/static.key" }  
            - { src: "/etc/openvpn/pki/ca.crt", dest: "cert/ca.crt" }
            - { src: "/etc/openvpn/pki/issued/client.crt", dest: "cert/client.crt" }
            - { src: "/etc/openvpn/pki/private/client.key", dest: "cert/client.key"}
***************************************************************************************
9)Start service open vpn
        - name: start service
          service:
            name: openvpn@client.service
            enabled: true
          tags: 
            - rest_vpn
‚óè openvpn.service - OpenVPN service
     Loaded: loaded (/lib/systemd/system/openvpn.service; enabled; vendor preset: enabled)
     Active: active (exited) since Sun 2023-10-15 17:47:48 UTC; 3h 18min ago
    Process: 374 ExecStart=/bin/true (code=exited, status=0/SUCCESS)
   Main PID: 374 (code=exited, status=0/SUCCESS)
        CPU: 1ms

*************************************CLIENT*******************************************
10)Template client.conf     
    - name: install config client
      block:
        - name: create file client.conf for client
          template:
            src: templ_ovpn/templ.j2
            dest: /etc/openvpn/client.conf
          tags: 
            - rest_vpn
**************************************************************************************
11) add handler to restart service
        - name: start service
          service:
            name: openvpn@client.service
            enabled: true
          tags: 
            - rest_vpn
      when: (ansible_hostname == "Client")
      notify:
        - restart vpn_client



12)Copy to Client sert and key

- name: Copy to Client
      block:
        - name:
          copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            mode: '0600'
          delegate_to: Client
          with_items:
          - { src: "cert/static.key", dest: "/etc/openvpn/static.key" }
          - { src: "cert/ca.crt", dest: "/ca.crt" }
          - { src: "cert/client.crt", dest: "/client.crt" }
          - { src: "cert/client.key", dest: "/client.key" }
      when: (ansible_hostname == "Server")


13) reboot
     - name: reboot all hosts
       block:
       - shell: systemctl reboot
         async: 300
         poll: 0
         ignore_errors: true

       - name: wait for system hosts
         wait_for_connection:
         delay: 60
         timeout: 300


*******************************************************************************
14)if i want change preference i choose true tap or tun or ras and restart service for tags

localadm@DEB:~/otus$ ansible-playbook -i host main.yml -t rest_vpn
[WARNING]: Found both group and host with same name: Client
[WARNING]: Found both group and host with same name: Server

PLAY [install all hosts] *******************************************************************************

TASK [Gathering Facts] *********************************************************************************
ok: [Client]
ok: [Server]

TASK [create template] *********************************************************************************
skipping: [Client]
ok: [Server]

TASK [start service] ***********************************************************************************
skipping: [Client]
ok: [Server]

TASK [create file serv.conf for client] ****************************************************************
skipping: [Server]
ok: [Client]

PLAY RECAP *********************************************************************************************
Client                     : ok=2    changed=0    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0   
Server                     : ok=3    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   

*********************************************************************************
15)check how to work tap and i start for server iperf and lisen

vagrant@Server:~$ -----------------------------------------------------------
Server listening on 5201
-----------------------------------------------------------

16) going to client and run iperf 
vagrant@Client:~$ iperf3 -c 10.10.10.1 -t 40 -i 5
Connecting to host 10.10.10.1, port 5201
[  5] local 10.10.10.2 port 52142 connected to 10.10.10.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-5.00   sec  97.3 MBytes   163 Mbits/sec   55   1.22 MBytes       
[  5]   5.00-10.00  sec  95.9 MBytes   161 Mbits/sec  182    302 KBytes       
[  5]  10.00-15.00  sec  93.3 MBytes   157 Mbits/sec    0    472 KBytes       
[  5]  15.00-20.00  sec  96.7 MBytes   162 Mbits/sec   22    485 KBytes       
[  5]  20.00-25.00  sec  97.9 MBytes   164 Mbits/sec   53    506 KBytes       
[  5]  25.00-30.00  sec  96.7 MBytes   162 Mbits/sec   43    356 KBytes       
[  5]  30.00-35.00  sec  96.7 MBytes   162 Mbits/sec    0    512 KBytes       
[  5]  35.00-40.00  sec  96.7 MBytes   162 Mbits/sec    0    632 KBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-40.00  sec   771 MBytes   162 Mbits/sec  355             sender
[  5]   0.00-40.04  sec   769 MBytes   161 Mbits/sec                  receiver

17)watch to server

Accepted connection from 10.10.10.2, port 47126
[  5] local 10.10.10.1 port 5201 connected to 10.10.10.2 port 47140
[ ID] Interval           Transfer     Bitrate
[  5]   0.00-1.00   sec  17.8 MBytes   150 Mbits/sec                  
[  5]   1.00-2.00   sec  18.8 MBytes   158 Mbits/sec                  
[  5]   2.00-3.00   sec  19.0 MBytes   159 Mbits/sec                  
[  5]   3.00-4.00   sec  18.7 MBytes   157 Mbits/sec                  
[  5]   4.00-5.00   sec  19.7 MBytes   166 Mbits/sec                  
[  5]   5.00-6.00   sec  19.6 MBytes   164 Mbits/sec                  
[  5]   6.00-7.00   sec  19.3 MBytes   162 Mbits/sec                  
[  5]   7.00-8.00   sec  19.4 MBytes   163 Mbits/sec                  
[  5]   8.00-9.00   sec  19.1 MBytes   161 Mbits/sec                  
[  5]   9.00-10.00  sec  18.9 MBytes   158 Mbits/sec                  
[  5]  10.00-11.00  sec  19.1 MBytes   160 Mbits/sec                  
[  5]  11.00-12.00  sec  19.8 MBytes   166 Mbits/sec                  
[  5]  12.00-13.00  sec  19.5 MBytes   164 Mbits/sec                  
[  5]  13.00-14.00  sec  19.6 MBytes   164 Mbits/sec                  
[  5]  14.00-15.00  sec  19.3 MBytes   162 Mbits/sec                  
[  5]  15.00-16.00  sec  19.2 MBytes   161 Mbits/sec                  
[  5]  16.00-17.00  sec  19.2 MBytes   161 Mbits/sec                  
[  5]  17.00-18.00  sec  19.1 MBytes   160 Mbits/sec                  
[  5]  18.00-19.00  sec  19.2 MBytes   161 Mbits/sec                  
[  5]  19.00-20.00  sec  19.1 MBytes   160 Mbits/sec                  
[  5]  20.00-21.00  sec  19.2 MBytes   161 Mbits/sec                  
[  5]  21.00-22.00  sec  19.3 MBytes   162 Mbits/sec                  
[  5]  22.00-23.00  sec  19.0 MBytes   160 Mbits/sec                  
[  5]  23.00-24.00  sec  19.4 MBytes   163 Mbits/sec                  
[  5]  24.00-25.00  sec  19.4 MBytes   163 Mbits/sec                  
[  5]  25.00-26.00  sec  19.6 MBytes   165 Mbits/sec                  
[  5]  26.00-27.00  sec  19.7 MBytes   165 Mbits/sec                  
[  5]  27.00-28.00  sec  20.0 MBytes   167 Mbits/sec                  
[  5]  28.00-29.00  sec  19.7 MBytes   165 Mbits/sec                  
[  5]  29.00-30.00  sec  19.2 MBytes   161 Mbits/sec                  
[  5]  30.00-31.00  sec  19.7 MBytes   166 Mbits/sec                  
[  5]  31.00-32.00  sec  19.7 MBytes   165 Mbits/sec                  
[  5]  32.00-33.00  sec  19.7 MBytes   165 Mbits/sec                  
[  5]  33.00-34.00  sec  18.7 MBytes   156 Mbits/sec                  
[  5]  34.00-35.00  sec  18.8 MBytes   158 Mbits/sec                  
[  5]  35.00-36.00  sec  19.4 MBytes   163 Mbits/sec                  
[  5]  36.00-37.00  sec  18.7 MBytes   156 Mbits/sec                  
[  5]  37.00-38.00  sec  19.2 MBytes   161 Mbits/sec                  
[  5]  38.00-39.00  sec  17.9 MBytes   150 Mbits/sec                  
[  5]  39.00-40.00  sec  18.7 MBytes   157 Mbits/sec                  
[  5]  40.00-40.04  sec   795 KBytes   157 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate
[  5]   0.00-40.04  sec   769 MBytes   161 Mbits/sec                  receiver
-----------------------------------------------------------
Server listening on 5201
-----------------------------------------------------------
18)Change preference and enabled tun and wath to client
 
vagrant@Client:~$ iperf3 -c 10.10.10.1 -t 40 -i 5
Connecting to host 10.10.10.1, port 5201
[  5] local 10.10.10.2 port 39482 connected to 10.10.10.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-5.00   sec  98.7 MBytes   166 Mbits/sec   59    539 KBytes       
[  5]   5.00-10.00  sec  96.9 MBytes   162 Mbits/sec   66    348 KBytes       
[  5]  10.00-15.00  sec  98.0 MBytes   164 Mbits/sec   15    437 KBytes       
[  5]  15.00-20.00  sec  99.0 MBytes   166 Mbits/sec    0    575 KBytes       
[  5]  20.00-25.00  sec  94.8 MBytes   159 Mbits/sec   66    388 KBytes       
[  5]  25.00-30.00  sec  97.8 MBytes   164 Mbits/sec    0    535 KBytes       
[  5]  30.00-35.00  sec  98.9 MBytes   166 Mbits/sec    0    653 KBytes       
[  5]  35.00-40.00  sec   100 MBytes   168 Mbits/sec    0    921 KBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-40.00  sec   784 MBytes   164 Mbits/sec  206             sender
[  5]   0.00-40.08  sec   783 MBytes   164 Mbits/sec                  receiver

iperf Done.

19)Watch to server

vagrant@Server:~$ Accepted connection from 10.10.10.2, port 39466
[  5] local 10.10.10.1 port 5201 connected to 10.10.10.2 port 39482
[ ID] Interval           Transfer     Bitrate
[  5]   0.00-1.00   sec  18.3 MBytes   153 Mbits/sec                  
[  5]   1.00-2.00   sec  19.8 MBytes   166 Mbits/sec                  
[  5]   2.00-3.00   sec  19.3 MBytes   162 Mbits/sec                  
[  5]   3.00-4.00   sec  19.3 MBytes   161 Mbits/sec                  
[  5]   4.00-5.00   sec  19.2 MBytes   161 Mbits/sec                  
[  5]   5.00-6.00   sec  19.4 MBytes   163 Mbits/sec                  
[  5]   6.00-7.00   sec  19.2 MBytes   161 Mbits/sec                  
[  5]   7.00-8.00   sec  19.3 MBytes   162 Mbits/sec                  
[  5]   8.00-9.00   sec  19.5 MBytes   164 Mbits/sec                  
[  5]   9.00-10.00  sec  19.2 MBytes   161 Mbits/sec                  
[  5]  10.00-11.00  sec  19.9 MBytes   167 Mbits/sec                  
[  5]  11.00-12.00  sec  19.4 MBytes   163 Mbits/sec                  
[  5]  12.00-13.00  sec  19.5 MBytes   164 Mbits/sec                  
[  5]  13.00-14.00  sec  19.6 MBytes   165 Mbits/sec                  
[  5]  14.00-15.00  sec  19.5 MBytes   163 Mbits/sec                  
[  5]  15.00-16.00  sec  19.9 MBytes   167 Mbits/sec                  
[  5]  16.00-17.00  sec  19.8 MBytes   166 Mbits/sec                  
[  5]  17.00-18.00  sec  19.4 MBytes   163 Mbits/sec                  
[  5]  18.00-19.00  sec  19.7 MBytes   165 Mbits/sec                  
[  5]  19.00-20.00  sec  19.7 MBytes   165 Mbits/sec                  
[  5]  20.00-21.00  sec  19.0 MBytes   159 Mbits/sec                  
[  5]  21.00-22.00  sec  19.1 MBytes   160 Mbits/sec                  
[  5]  22.00-23.00  sec  18.9 MBytes   159 Mbits/sec                  
[  5]  23.00-24.00  sec  19.0 MBytes   160 Mbits/sec                  
[  5]  24.00-25.00  sec  19.5 MBytes   163 Mbits/sec                  
[  5]  25.00-26.00  sec  19.1 MBytes   160 Mbits/sec                  
[  5]  26.00-27.00  sec  19.5 MBytes   164 Mbits/sec                  
[  5]  27.00-28.00  sec  19.4 MBytes   163 Mbits/sec                  
[  5]  28.00-29.00  sec  20.1 MBytes   169 Mbits/sec                  
[  5]  29.00-30.00  sec  19.7 MBytes   165 Mbits/sec                  
[  5]  30.00-31.00  sec  19.3 MBytes   162 Mbits/sec                  
[  5]  31.00-32.00  sec  19.5 MBytes   163 Mbits/sec                  
[  5]  32.00-33.00  sec  19.6 MBytes   164 Mbits/sec                  
[  5]  33.00-34.00  sec  20.0 MBytes   168 Mbits/sec                  
[  5]  34.00-35.00  sec  20.4 MBytes   171 Mbits/sec                  
[  5]  35.00-36.00  sec  20.0 MBytes   168 Mbits/sec                  
[  5]  36.00-37.00  sec  20.2 MBytes   169 Mbits/sec                  
[  5]  37.00-38.00  sec  20.1 MBytes   168 Mbits/sec                  
[  5]  38.00-39.00  sec  19.9 MBytes   167 Mbits/sec                  
[  5]  39.00-40.00  sec  20.1 MBytes   169 Mbits/sec                  
[  5]  40.00-40.08  sec  1.64 MBytes   166 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate
[  5]   0.00-40.08  sec   783 MBytes   164 Mbits/sec                  receiver
-----------------------------------------------------------
Server listening on 5201
-----------------------------------------------------------
this is vpn work 

conclusion:
tap 
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-40.00  sec   771 MBytes   162 Mbits/sec  355             sender
[  5]   0.00-40.04  sec   769 MBytes   161 Mbits/sec                  receiver

tun

[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-40.00  sec   784 MBytes   164 Mbits/sec  206             sender
[  5]   0.00-40.08  sec   783 MBytes   164 Mbits/sec                  receiver

differences two metods: i watch speed simmilar and only retry tap > tun
tun > tap  is little more transer MBytes

but it is to diferent metod work for vpn
-TUN devices work at the IP level and they operate with Layer 3 packets (IP packets).
-TUN encapsulate the IP packets inside the VPN protocol
-TUN is used with routing
-TAP devices work at the Ethernet (MAC) level and work Laers 2
-TAP encapsulate the Ethernet frames inside the VPN 
-TAP is used with Ethernet bridging
A lot of piple use TUN metod,TAP - very specific, if he work only two liers
TUN is generally used more because it tends to meet the requirements for most VPN users,  TAP is used for more specific situations where you need to bridge networks at the Ethernet level.
 
********************************************check eaysy-ras server**********************
20) We look interface tun0 

vagrant@Server:~$ ip a
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 08:00:27:8d:c0:4d brd ff:ff:ff:ff:ff:ff
    altname enp0s3
    inet 10.0.2.15/24 brd 10.0.2.255 scope global dynamic eth0
       valid_lft 85827sec preferred_lft 85827sec
    inet6 fe80::a00:27ff:fe8d:c04d/64 scope link 
       valid_lft forever preferred_lft forever
3: eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 08:00:27:41:2e:72 brd ff:ff:ff:ff:ff:ff
    altname enp0s8
    inet 192.168.20.2/24 brd 192.168.20.255 scope global eth1
       valid_lft forever preferred_lft forever
    inet6 fe80::a00:27ff:fe41:2e72/64 scope link 
       valid_lft forever preferred_lft forever
4: eth2: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 08:00:27:0e:4d:0a brd ff:ff:ff:ff:ff:ff
    altname enp0s9
    inet 192.168.56.10/24 brd 192.168.56.255 scope global eth2
       valid_lft forever preferred_lft forever
    inet6 fe80::a00:27ff:fe0e:4d0a/64 scope link 
       valid_lft forever preferred_lft forever
6: tun0: <POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 500
    link/none 
    inet 10.10.10.1/24 scope global tun0
       valid_lft forever preferred_lft forever
    inet6 fe80::e8b5:9c35:503e:816/64 scope link stable-privacy 
       valid_lft forever preferred_lft forever
vagrant@Server:~$ 
***************************************************************************************************
check route and we look tun0

vagrant@Server:~$ ip r
default via 10.0.2.2 dev eth0 
10.0.2.0/24 dev eth0 proto kernel scope link src 10.0.2.15 
10.10.10.0/24 dev tun0 proto kernel scope link src 10.10.10.1 
10.15.0.0/24 via 10.10.10.2 dev tun0 
192.168.20.0/24 dev eth1 proto kernel scope link src 192.168.20.2 
192.168.56.0/24 dev eth2 proto kernel scope link src 192.168.56.10 

***********************************client*******************************************************
look ton0 and ip 10.10.10.2

vagrant@Client:~$ ip a
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 08:00:27:8d:c0:4d brd ff:ff:ff:ff:ff:ff
    altname enp0s3
    inet 10.0.2.15/24 brd 10.0.2.255 scope global dynamic eth0
       valid_lft 85470sec preferred_lft 85470sec
    inet6 fe80::a00:27ff:fe8d:c04d/64 scope link 
       valid_lft forever preferred_lft forever
3: eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 08:00:27:0d:38:20 brd ff:ff:ff:ff:ff:ff
    altname enp0s8
    inet 192.168.20.3/24 brd 192.168.20.255 scope global eth1
       valid_lft forever preferred_lft forever
    inet6 fe80::a00:27ff:fe0d:3820/64 scope link 
       valid_lft forever preferred_lft forever
4: eth2: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 08:00:27:8a:16:10 brd ff:ff:ff:ff:ff:ff
    altname enp0s9
    inet 192.168.56.11/24 brd 192.168.56.255 scope global eth2
       valid_lft forever preferred_lft forever
    inet6 fe80::a00:27ff:fe8a:1610/64 scope link 
       valid_lft forever preferred_lft forever
5: tun0: <POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 500
    link/none 
    inet 10.10.10.2/24 scope global tun0
       valid_lft forever preferred_lft forever
    inet6 fe80::df:2e1a:4574:2c69/64 scope link stable-privacy 
       valid_lft forever preferred_lft forever
************************************************************************************************
vagrant@Client:~$ ip r
default via 10.0.2.2 dev eth0 
10.0.2.0/24 dev eth0 proto kernel scope link src 10.0.2.15 
10.10.10.0/24 dev tun0 proto kernel scope link src 10.10.10.2 
192.168.20.0/24 dev eth1 proto kernel scope link src 192.168.20.3 
192.168.56.0/24 dev eth2 proto kernel scope link src 192.168.56.11
*********************************************client**********************************************
check ping  client
vagrant@Client:~$ ping -c 4 10.10.10.1
PING 10.10.10.1 (10.10.10.1) 56(84) bytes of data.
64 bytes from 10.10.10.1: icmp_seq=1 ttl=64 time=0.573 ms
64 bytes from 10.10.10.1: icmp_seq=2 ttl=64 time=2.02 ms
64 bytes from 10.10.10.1: icmp_seq=3 ttl=64 time=1.92 ms
64 bytes from 10.10.10.1: icmp_seq=4 ttl=64 time=1.90 ms

--- 10.10.10.1 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3012ms
rtt min/avg/max/mdev = 0.573/1.600/2.016/0.595 ms
******************************************Server************************************************
Check tcpdump for server tun0 and we look ping
vagrant@Server:~$ sudo tcpdump -i tun0
tcpdump: verbose output suppressed, use -v[v]... for full protocol decode
listening on tun0, link-type RAW (Raw IP), snapshot length 262144 bytes
18:17:44.603011 IP 10.10.10.2 > 10.10.10.1: ICMP echo request, id 8097, seq 1, length 64
18:17:44.603026 IP 10.10.10.1 > 10.10.10.2: ICMP echo reply, id 8097, seq 1, length 64
18:17:45.612728 IP 10.10.10.2 > 10.10.10.1: ICMP echo request, id 8097, seq 2, length 64
18:17:45.612801 IP 10.10.10.1 > 10.10.10.2: ICMP echo reply, id 8097, seq 2, length 64
18:17:46.614373 IP 10.10.10.2 > 10.10.10.1: ICMP echo request, id 8097, seq 3, length 64
18:17:46.614414 IP 10.10.10.1 > 10.10.10.2: ICMP echo reply, id 8097, seq 3, length 64
18:17:47.616291 IP 10.10.10.2 > 10.10.10.1: ICMP echo request, id 8097, seq 4, length 64
18:17:47.616331 IP 10.10.10.1 > 10.10.10.2: ICMP echo reply, id 8097, seq 4, length 64

tunel work.


