1)Create 3 Routers in Vagrant and add --nested-hw-virt
**********************************************************
# -*- mode: ruby -*-
# vim: set ft=ruby

MACHINES = {
:Router1 => {
        :box_name => "debian/bullseye64",
        :vm_name => "Router1",
        :net => [
                   {ip: '10.0.10.1', adapter: 2, netmask: "255.255.255.252", virtualbox__intnet: "r1-r2"},
                   {ip: '10.0.12.1', adapter: 3, netmask: "255.255.255.252", virtualbox__intnet: "r1-r3"},
                   {ip: '192.168.10.1', adapter: 4, netmask: "255.255.255.0", virtualbox__intnet: "net1"},
                   {ip: '192.168.56.10', adapter: 5},
       
        ]
  },

:Router2 => {
        :box_name => "debian/bullseye64",
        :vm_name => "Router2",
        :net => [
             
                   {ip: '10.0.10.2', adapter: 2, netmask: "255.255.255.252", virtualbox__intnet: "r1-r2"},
                   {ip: '10.0.11.2', adapter: 3, netmask: "255.255.255.252", virtualbox__intnet: "r2-r3"},
                   {ip: '192.168.20.1', adapter: 4, netmask: "255.255.255.0", virtualbox__intnet: "net2"},
                   {ip: '192.168.56.11', adapter: 5},

                ]
},

:Router3 => {
        :box_name => "debian/bullseye64",
        :vm_name => "Router3",
        :net => [
                   {ip: '10.0.12.2', adapter: 2, netmask: "255.255.255.252", virtualbox__intnet: "r2-r3"},
                   {ip: '10.0.11.1', adapter: 3, netmask: "255.255.255.252", virtualbox__intnet: "r1-r3"},
                   {ip: '192.168.30.1', adapter: 4, netmask: "255.255.255.0", virtualbox__intnet: "net3"},
                   {ip: '192.168.56.12', adapter: 5},   
                ]
  },
}
Vagrant.configure("2") do |config|

  MACHINES.each do |boxname, boxconfig|
    
    config.vm.define boxname do |box|
   
      box.vm.box = boxconfig[:box_name]
      box.vm.host_name = boxconfig[:vm_name]
      boxconfig[:net].each do |ipconf|
      box.vm.network "private_network", ip: ipconf[:ip], virtualbox__intnet: ipconf[:virtualbox__intnet], netmask: ipconf[:netmask], adapter: ipconf[:adapter]
      end
       box.vm.provider :virtualbox do |v|
        v.customize ['modifyvm', :id, '--nested-hw-virt', 'on']
      end

  
 if boxconfig[:vm_name] == "Router3"
       box.vm.provision "ansible" do |ansible|
        ansible.playbook = "main.yml"
        ansible.inventory_path = "host"
        ansible.host_key_checking = "false"
        ansible.limit = "all"
       end
      end
    end
  end
end
********************************************************************
2)reate host file for ansible
*******************************************************************
[Router1]
Router1 ansible_host=127.0.0.1 ansible_user=vagrant ansible_port=2222 ansible_private_key_file=/home/localadm/otus/.vagrant/machines/Router1/virtualbox/private_key router_id=1.1.1.1 router_id_enable=true
[Router2]
Router2 ansible_host=127.0.0.1 ansible_user=vagrant ansible_port=2200 ansible_private_key_file=/home/localadm/otus/.vagrant/machines/Router2/virtualbox/private_key router_id=2.2.2.2 router_id_enable=true
[Router3]
Router3 ansible_host=127.0.0.1 ansible_user=vagrant ansible_port=2201 ansible_private_key_file=/home/localadm/otus/.vagrant/machines/Router3/virtualbox/private_key router_id=3.3.3.3 router_id_enable=true

[vm:children]
Router1
Router2
Router3
********************************************************************
3)Create ansible and install programs for work
tasks:
    - name: install update and program
      apt:
        update_cache: yes
        name: 
        - traceroute
        - tcpdump
        - nmap
        - frr
        - frr-pythontools
        state: latest
*******************************************************************
4)enable forvardin
 - name: enable forwarding  
      sysctl:
        name: net.ipv4.conf.all.forwarding
        value: '1'
        state: present  
******************************************************************
5)enable access for - asymmetrical Route
- name: set up asynchronous routing
      sysctl:
        name: net.ipv4.conf.all.rp_filter
        value: '0'
        state: present
******************************************************************
6)Change preference for frr and enabled access ospf
- name: change config frr
      lineinfile:
        path: /etc/frr/daemons
        regexp: 'ospfd='
        line: 'ospfd=yes'
****************************************************************
7)I wana be create template and automation
This is template bring vars from gathering facts in 3 Routers and paste for frr.conf

  - name: tamplates frr
      template:
        src: templ.j2
        dest: /etc/frr/frr.conf
        owner: frr
        group: frr
        mode: 0644

**************************Templ********************************
!Config ospf
!version frr
frr version 7.5.1
frr defaults traditional
hostname {{ ansible_hostname }}                                            #add name for routers
log syslog informational
no ipv6 forwarding
service integrated-vtysh-configi
!
!Config interface eth1
!
interface {{ ansible_eth1.device }}                                        #add eth1 
ip address {{ ansible_eth1.ipv4.address }}/{{ansible_eth1.ipv4.prefix}}    #add network and prefix
ip ospf mtu-ignore 
!
{% if ansible_hostname == 'Router1' %}                                     # if ( vars symmetric = true => add cost 1000 for Router2)
!ip ospf cost 1000
{% elif ansible_hostname == 'Router2' and symmetric_routing == true %}
ip ospf cost 1000
{% else %}
!ip ospf cost 450
{% endif %}
!
{% if ansible_hostname == 'Router1' %}                                   # if this is Router1-add cost 1000 eth1
ip ospf cost 1000
{% else %}
!ip ospf cost 450
{% endif %}
!
ip ospf hello-interval 10
ip ospf dead-interval 30
!
!Config interface eth2
!
interface {{ ansible_eth2.device }}
ip address {{ ansible_eth2.ipv4.address }}/{{ ansible_eth2.ipv4.prefix }}
ip ospf mtu-ignore
ip ospf hello-interval 10
ip ospf dead-interval 30
!
!Config interface eth3
!
interface {{ ansible_eth3.device }}
ip address {{ ansible_eth3.ipv4.address}}/{{ ansible_eth3.ipv4.prefix }}
ip ospf mtu-ignore
ip ospf hello-interval 10
ip ospf dead-interval 30
!
router ospf
!add router id
{% if router_id_enable == false %}!{% endif %}router-id {{ router_id }}             #add router-id
network {{ ansible_eth1.ipv4.network }}/{{ ansible_eth1.ipv4.prefix }} area 0       # add zone for routers
network {{ ansible_eth2.ipv4.network}}/{{ ansible_eth2.ipv4.prefix }} area 0
network {{ ansible_eth3.ipv4.network }}/{{ ansible_eth3.ipv4.prefix }} area 0
!Add Neighbor
{% if ansible_hostname == 'Router1' %} 
neighbor 10.0.10.2                                                                 #add neighbor for routers
neighbor 10.0.12.2 
{% endif %}
{% if ansible_hostname == 'Router2' %} 
neighbor 10.0.10.1
neighbor 10.0.11.1 
{% endif %}
{% if ansible_hostname == 'Router3' %}
neighbor 10.0.12.1
neighbor 10.0.11.2 
{% endif %}
*************************************************
8) restart service and reboot vm
- name: restart
      service:
        name: frr
        state: restarted
        enabled: true

    - name: reboot all hosts
      block:
      - shell: systemctl reboot
        async: 300
        poll: 0
        ignore_errors: true

      - name: wait for system hosts
        wait_for_connection:
        delay: 60
        timeout: 300
*************************************************
9)Check service-ok

frr.service - FRRouting
     Loaded: loaded (/lib/systemd/system/frr.service; enabled; vendor preset: e>
     Active: active (running) since Fri 2023-10-13 22:07:25 UTC; 47min ago
       Docs: https://frrouting.readthedocs.io/en/latest/setup.html
    Process: 225 ExecStart=/usr/lib/frr/frrinit.sh start (code=exited, status=0>
     Status: "FRR Operational"
      Tasks: 9 (limit: 510)
     Memory: 21.9M
        CPU: 2.528s
     CGroup: /system.slice/frr.service
             ├─282 /usr/lib/frr/watchfrr -d -F traditional zebra ospfd staticd
             ├─332 /usr/lib/frr/zebra -d -F traditional -A 127.0.0.1 -s 90000000
             ├─368 /usr/lib/frr/ospfd -d -F traditional -A 127.0.0.1
             └─413 /usr/lib/frr/staticd -d -F traditional -A 127.0.0.1

Oct 13 22:07:25 Router1 watchfrr[282]: ospfd state -> up : connect succeeded
Oct 13 22:07:25 Router1 watchfrr[282]: zebra state -> up : connect succeeded
Oct 13 22:07:25 Router1 watchfrr[282]: all daemons up, doing startup-complete n>
Oct 13 22:07:25 Router1 frrinit.sh[225]: Started watchfrr.
Oct 13 22:07:25 Router1 systemd[1]: Started FRRouting.
Oct 13 22:07:35 Router1 zebra[332]: if_zebra_speed_update: eth0 old speed: 4294>
Oct 13 22:07:35 Router1 zebra[332]: if_zebra_speed_update: eth1 old speed: 4294>
Oct 13 22:07:35 Router1 zebra[332]: if_zebra_speed_update: eth2 old speed: 42
**************************************************************
10)check forwarding all and asimmetric
***************************************************************
root@Router1:/home/vagrant# sysctl net.ipv4.conf.all.rp_filter
net.ipv4.conf.all.rp_filter = 0
root@Router1:/home/vagrant# sysctl net.ipv4.conf.all.forwarding
net.ipv4.conf.all.forwarding = 1
**************************************************************
11)check route
****************************************************************
vagrant@Router1:~$ ip r
default via 10.0.2.2 dev eth0 
10.0.2.0/24 dev eth0 proto kernel scope link src 10.0.2.15 
10.0.10.0/30 dev eth1 proto kernel scope link src 10.0.10.1 
10.0.11.0/30 nhid 32 via 10.0.10.2 dev eth1 proto ospf metric 20 
10.0.12.0/30 dev eth2 proto kernel scope link src 10.0.12.1 
192.168.10.0/24 dev eth3 proto kernel scope link src 192.168.10.1 
192.168.20.0/24 nhid 32 via 10.0.10.2 dev eth1 proto ospf metric 20 
192.168.56.0/24 dev eth4 proto kernel scope link src 192.168.56.10 
******************************************************************
12)go to vtysh and check Routers {1..3} and we watch ospf route
******************************************************************
vagrant@Router1:~$ sudo vtysh 

Hello, this is FRRouting (version 7.5.1).
Copyright 1996-2005 Kunihiro Ishiguro, et al.

Router1# show ip route
Codes: K - kernel route, C - connected, S - static, R - RIP,
       O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP,
       T - Table, v - VNC, V - VNC-Direct, A - Babel, D - SHARP,
       F - PBR, f - OpenFabric,
       > - selected route, * - FIB route, q - queued, r - rejected, b - backup

K>* 0.0.0.0/0 [0/0] via 10.0.2.2, eth0, 00:00:51
C>* 10.0.2.0/24 is directly connected, eth0, 00:00:51
O   10.0.10.0/30 [110/100] is directly connected, eth1, weight 1, 00:00:23
C>* 10.0.10.0/30 is directly connected, eth1, 00:00:54
O>* 10.0.11.0/30 [110/200] via 10.0.10.2, eth1, weight 1, 00:00:13
O   10.0.12.0/30 [110/100] is directly connected, eth2, weight 1, 00:00:41
C>* 10.0.12.0/30 is directly connected, eth2, 00:00:54
O   192.168.10.0/24 [110/100] is directly connected, eth3, weight 1, 00:00:41
C>* 192.168.10.0/24 is directly connected, eth3, 00:00:54
O>* 192.168.20.0/24 [110/200] via 10.0.10.2, eth1, weight 1, 00:00:13
C>* 192.168.56.0/24 is directly connected, eth4, 00:00:54
*********************************************************************
vagrant@Router2:~$ sudo su
root@Router2:/home/vagrant# vtysh 

Hello, this is FRRouting (version 7.5.1).
Copyright 1996-2005 Kunihiro Ishiguro, et al.

Router2# show ip route
Codes: K - kernel route, C - connected, S - static, R - RIP,
       O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP,
       T - Table, v - VNC, V - VNC-Direct, A - Babel, D - SHARP,
       F - PBR, f - OpenFabric,
       > - selected route, * - FIB route, q - queued, r - rejected, b - backup

K>* 0.0.0.0/0 [0/0] via 10.0.2.2, eth0, 00:03:45
C>* 10.0.2.0/24 is directly connected, eth0, 00:03:45
O   10.0.10.0/30 [110/100] is directly connected, eth1, weight 1, 00:03:30
C>* 10.0.10.0/30 is directly connected, eth1, 00:03:43
O   10.0.11.0/30 [110/100] is directly connected, eth2, weight 1, 00:03:30
C>* 10.0.11.0/30 is directly connected, eth2, 00:03:43
O>* 10.0.12.0/30 [110/200] via 10.0.10.1, eth1, weight 1, 00:03:03
O>* 192.168.10.0/24 [110/200] via 10.0.10.1, eth1, weight 1, 00:03:03
O   192.168.20.0/24 [110/100] is directly connected, eth3, weight 1, 00:03:30
C>* 192.168.20.0/24 is directly connected, eth3, 00:03:43
C>* 192.168.56.0/24 is directly connected, eth4, 00:03:43
*********************************************************************
vagrant@Router3:~$ sudo su
root@Router3:/home/vagrant# vtysh 

Hello, this is FRRouting (version 7.5.1).
Copyright 1996-2005 Kunihiro Ishiguro, et al.

Router3# show ip route
Codes: K - kernel route, C - connected, S - static, R - RIP,
       O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP,
       T - Table, v - VNC, V - VNC-Direct, A - Babel, D - SHARP,
       F - PBR, f - OpenFabric,
       > - selected route, * - FIB route, q - queued, r - rejected, b - backup

K>* 0.0.0.0/0 [0/0] via 10.0.2.2, eth0, 00:04:56
C>* 10.0.2.0/24 is directly connected, eth0, 00:04:56
O   10.0.11.0/30 [110/100] is directly connected, eth2, weight 1, 00:04:46
C>* 10.0.11.0/30 is directly connected, eth2, 00:04:59
O   10.0.12.0/30 [110/100] is directly connected, eth1, weight 1, 00:04:46
C>* 10.0.12.0/30 is directly connected, eth1, 00:04:59
O   192.168.30.0/24 [110/100] is directly connected, eth3, weight 1, 00:04:46
C>* 192.168.30.0/24 is directly connected, eth3, 00:04:59
C>* 192.168.56.0/24 is directly connected, eth4, 00:04:59
*************************************************************************

*************************************************************************
13)Check ping
agrant@Router1:~$ ping 192.168.30.1
PING 192.168.30.1 (192.168.30.1) 56(84) bytes of data.
64 bytes from 192.168.30.1: icmp_seq=1 ttl=63 time=2.11 ms
64 bytes from 192.168.30.1: icmp_seq=2 ttl=63 time=2.16 ms
^Z
[1]+  Stopped                 ping 192.168.30.1
vagrant@Router1:~$ ping 192.168.20.1
PING 192.168.20.1 (192.168.20.1) 56(84) bytes of data.
64 bytes from 192.168.20.1: icmp_seq=1 ttl=64 time=1.07 ms
64 bytes from 192.168.20.1: icmp_seq=2 ttl=64 time=1.01 ms
^Z
[2]+  Stopped                 ping 192.168.20.1
vagrant@Router1:~$ ping 192.168.10.1
PING 192.168.10.1 (192.168.10.1) 56(84) bytes of data.
64 bytes from 192.168.10.1: icmp_seq=1 ttl=64 time=0.045 ms
64 bytes from 192.168.10.1: icmp_seq=2 ttl=64 time=0.065 ms
^X64 bytes from 192.168.10.1: icmp_seq=3 ttl=64 time=0.073 ms
^Z
[3]+  Stopped                 ping 192.168.10.1
*************************************************************************
14)check traceroute
***********************************************************************
vagrant@Router2:~$ traceroute 192.168.20.1
traceroute to 192.168.20.1 (192.168.20.1), 30 hops max, 60 byte packets
 1  192.168.20.1 (192.168.20.1)  0.045 ms  0.014 ms  0.013 ms
vagrant@Router2:~$ traceroute 192.168.10.1
traceroute to 192.168.10.1 (192.168.10.1), 30 hops max, 60 byte packets
 1  192.168.10.1 (192.168.10.1)  1.068 ms  0.962 ms  0.901 ms
vagrant@Router2:~$ traceroute 192.168.1Connection to 127.0.0.1 closed by remote
**********************************************************************
13) enable cost 1000 for eth1 asimmetric route
**********************************************************************
K>* 0.0.0.0/0 [0/0] via 10.0.2.2, eth0, 00:00:14
C>* 10.0.2.0/24 is directly connected, eth0, 00:00:14
O   10.0.10.0/30 [110/1000] is directly connected, eth1, weight 1, 00:00:12       #1000
C>* 10.0.10.0/30 is directly connected, eth1, 00:00:12
O   10.0.12.0/30 [110/1] is directly connected, eth2, weight 1, 00:00:12
C>* 10.0.12.0/30 is directly connected, eth2, 00:00:12
O   192.168.10.0/24 [110/1] is directly connected, eth3, weight 1, 00:00:12
C>* 192.168.10.0/24 is directly connected, eth3, 00:00:12
C>* 192.168.56.0/24 is directly connected, eth4, 00:00:12
**************************************************************************
14)disable eth1
**************************************************************************
vagrant@Router1:~$ sudo ip link set eth1 down
vagrant@Router1:~$ ip a |grep state
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
3: eth1: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast state DOWN group defau
15)ping

